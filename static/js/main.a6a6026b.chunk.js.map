{"version":3,"sources":["components/header/Header.tsx","components/image-gallery/ImageGallery.view.tsx","page/overlay/OverLay.view.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","props","_useState","useState","_useState2","Object","slicedToArray","isOpen","setOpen","_useState3","_useState4","active","setActive","react_default","a","createElement","id","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","items","map","_ref","index","label","path","NavItem","key","NavLink","children","Gallery","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","animating","state","activeIndex","count","next","bind","assertThisInitialized","previous","goToIndex","onExiting","onExited","React","Children","setState","_this$state","nextIndex","_this$state2","newIndex","_this2","_this$props","_this$props$slideCont","slideContent","child","_ref$caption","caption","_ref$captionHeader","captionHeader","CarouselItem","concat","CarouselCaption","captionText","slides","getSlides","toArray","Carousel","CarouselIndicators","onClickHandler","CarouselControl","direction","directionText","Component","OverLay","Container","Row","Col","md","style","alignSelf","target","index_es","icon","faAndroid","faGithub","Fade","in","tag","timeout","ImageGallery_view","src","process","navItems","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6a6026b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { \r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n} from 'reactstrap';\r\nimport './header.scss';\r\n\r\ninterface Item {\r\n    label: string;\r\n    path?: string;\r\n}\r\n\r\ninterface IProps {\r\n    items: Item[];\r\n    logoPath?: string;\r\n    children?: React.ReactNode;\r\n}\r\n\r\nexport default function Header(props: IProps) {\r\n    const [isOpen, setOpen] = useState(false);\r\n    const [active, setActive] = useState(0);\r\n\r\n    function renderNavItem({ label, path }: Item, index: number) {\r\n        return (\r\n            <NavItem key={index}>\r\n                <NavLink href={path || '#'} active={active === index} onClick={() => setActive(index)}>\r\n                    {label}\r\n                </NavLink>\r\n            </NavItem>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <header id=\"header\">\r\n            <Navbar color=\"light\" light expand=\"md\">\r\n                <NavbarBrand href=\"/\">reactstrap</NavbarBrand>\r\n                <NavbarToggler onClick={() => setOpen(!isOpen)} />\r\n                <Collapse isOpen={isOpen} navbar>\r\n                    <Nav className=\"ml-auto\" navbar>\r\n                        {\r\n                            props.items.map(renderNavItem)\r\n                        }\r\n                    </Nav>\r\n                </Collapse>\r\n            </Navbar>\r\n                {/* <div className=\"header-overlay\"> */}\r\n                    {props.children}\r\n                {/* </div> */}\r\n        </header>\r\n    );\r\n}","import React, { Component } from 'react';\r\nimport {\r\n    Carousel,\r\n    CarouselItem,\r\n    CarouselControl,\r\n    CarouselIndicators,\r\n    CarouselCaption\r\n  } from 'reactstrap';\r\n\r\n  import './image-gallery.scss';\r\n\r\ninterface IProps extends React.HTMLAttributes<HTMLDivElement>{\r\n    slideContent?: { captionHeader?: string, caption?: string }[];\r\n}\r\n\r\ninterface IState {\r\n    activeIndex: number;\r\n    count: number;\r\n}\r\n\r\nclass Gallery extends Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = { activeIndex: 0, count: 0 };\r\n        this.next = this.next.bind(this);\r\n        this.previous = this.previous.bind(this);\r\n        this.goToIndex = this.goToIndex.bind(this);\r\n        this.onExiting = this.onExiting.bind(this);\r\n        this.onExited = this.onExited.bind(this);\r\n        this.animating = false;\r\n    }\r\n\r\n    animating: boolean;\r\n\r\n    componentDidMount() {\r\n        const count = React.Children.count(this.props.children);\r\n        this.setState({ count });\r\n    }\r\n\r\n    onExiting() {\r\n        this.animating = true;\r\n    }\r\n\r\n    onExited() {\r\n        this.animating = false;\r\n    }\r\n\r\n    next() {\r\n        const { count, activeIndex } = this.state;\r\n        if (this.animating) return;\r\n        const nextIndex = activeIndex === count - 1 ? 0 : activeIndex + 1;\r\n        this.setState({ activeIndex: nextIndex });\r\n    }\r\n\r\n    previous() {\r\n        const { count, activeIndex } = this.state;\r\n        if (this.animating) return;\r\n        const nextIndex = activeIndex === 0 ? count - 1 : activeIndex - 1;\r\n        this.setState({ activeIndex: nextIndex });\r\n    }\r\n\r\n    goToIndex(newIndex: number) {\r\n        if (this.animating) return;\r\n        this.setState({ activeIndex: newIndex });\r\n    }\r\n\r\n    getSlides() {\r\n        const { children, slideContent = [] } = this.props;\r\n\r\n        return React.Children.map(children, (child, index) => {\r\n            const { caption = '', captionHeader = '' } = slideContent![index] || {};\r\n            return (\r\n                <CarouselItem\r\n                    onExiting={this.onExiting}\r\n                    onExited={this.onExited}\r\n                    key={`carouselItem-${index}`}\r\n                >\r\n                    {child}\r\n                    <CarouselCaption captionText={caption} captionHeader={captionHeader} />\r\n                </CarouselItem>\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { activeIndex } = this.state;\r\n        const slides = this.getSlides();\r\n        const { children } = this.props;\r\n        const items = React.Children.toArray(children);\r\n\r\n        return (\r\n            <Carousel\r\n                activeIndex={activeIndex}\r\n                next={this.next}\r\n                previous={this.previous}\r\n                className={this.props.className}\r\n            >\r\n                <CarouselIndicators items={items as object[]} activeIndex={activeIndex} onClickHandler={this.goToIndex} />\r\n                {slides}\r\n                <CarouselControl direction=\"prev\" directionText=\"Previous\" onClickHandler={this.previous} />\r\n                <CarouselControl direction=\"next\" directionText=\"Next\" onClickHandler={this.next} />\r\n            </Carousel>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Gallery;","import React from 'react';\r\nimport { Col, Row, Fade, Container } from 'reactstrap';\r\nimport { Gallery } from '../../components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAndroid, faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport './overlay.scss';\r\n\r\nexport default function OverLay() {\r\n    return (\r\n        <Container className=\"content-overlay\">\r\n        <Row>\r\n            <Col md=\"5\" style={{alignSelf:'center'}}>\r\n                <div className=\"header-text\">\r\n                    <div className=\"header-heading\">\r\n                        <h1>PetHealth</h1>\r\n                        <h4>The mobile platform app that helps you to share journal with teams safely.</h4>\r\n                    </div>\r\n                    <div className=\"header-btns\">\r\n                        <p>Descargalo en</p>\r\n                        <a href=\"https://developer.android.com/studio\" target=\"_blank\">\r\n                            <FontAwesomeIcon icon={faAndroid} className=\"fa-icon\" />\r\n                        </a>\r\n                        <a href=\"https://github.com/LuisGH1234/peth-health\" target=\"_blank\">\r\n                            <FontAwesomeIcon icon={faGithub} className=\"fa-icon\" />\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </Col>\r\n            <Col md=\"7\" style={{alignSelf:'center'}}>\r\n                <div className=\"header-images\">\r\n                    <Fade in tag=\"div\" timeout={200}>\r\n                        <Gallery>\r\n                            <img src={`${process.env.PUBLIC_URL}/images/image2.jpeg`} />\r\n                            <img src={`${process.env.PUBLIC_URL}/images/image3.jpeg`} />\r\n                        </Gallery>\r\n                    </Fade>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n        </Container>\r\n    );\r\n}","import React, { useState } from 'react';\nimport { Header } from './components';\nimport { Overlay } from './page';\nimport logo from './logo.svg';\nimport './App.scss';\n\nconst App: React.FC = () => {\n  // const [time, setTime] = useState(new Date());\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          // href=\"https://reactjs.org\"\n          href=\"#\"\n          // target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          onClick={(e) => {e.preventDefault(); setTime(new Date())}}\n        >\n          Learn React\n        </a>\n      </header>\n      {time.toString()} */}\n      <Header items={navItems}><Overlay /></Header>\n      <div><h1>PET</h1></div>\n    </div>\n  );\n}\n\n//#region misc\nconst navItems = [\n  {\n    label: 'Home',\n    path: '#header',\n  },\n  {\n    label: 'Nosotros',\n    path: '#',\n  },\n  {\n    label: 'Github',\n    path: 'https://github.com/LuisGH1234/peth-health',\n  },\n];\n//#endregion\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}